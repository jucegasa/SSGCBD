package reportes.view;

import tooldataform.ModelFactory;
import tooldataform.core.CoreFactory;
import tooldataform.core.Domain_Diagram;
import tooldataform.core.Project;
import tooldataform.formmodel.concreta.ColumView;
import tooldataform.formmodel.concreta.ConcretaFactory;
import tooldataform.formmodel.concreta.Container;
import tooldataform.formmodel.concreta.DataForm_Diagram;
import tooldataform.formmodel.concreta.Interface;
import tooldataform.formmodel.concreta.LabelView;
import tooldataform.formmodel.concreta.TableView;
import tooldataform.formmodel.containers.GraphicalContainer;
import tooldataform.pmoo.Clase;
import tooldataform.pmoo.PmooFactory;
import tooldataform.pmoo.Valores;

import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.ParserConfigurationException;

import org.apache.poi.EncryptedDocumentException;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;
import org.w3c.dom.Node;
import org.w3c.dom.Element;
import org.xml.sax.SAXException;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Collections;
import java.util.LinkedList;
import java.util.Queue;

public class DataformGeneration{
	
	//--------------------------------------------------------
	//Atributos
	//--------------------------------------------------------
	
	 /**
	  * Model factory del dataform
	  */
	 protected ModelFactory modelFactory;
	 
	 /**
	  * Objeto del proyecto Dataform
	  */
	 protected Project project;
	 
	 /**
	  * Diagrama dataform
	  * contiene la produccion de 
	  * los elementos capturados 
	  * en el excel
	  */
	 protected DataForm_Diagram dataformDiagram;
	 
	 /**
	  * Domain Diagram necesario
	  * para generar la view part
	  */
	 protected Domain_Diagram domainDiagram;
	 
	 /**
	  * Clase que pertenece al domainDiagram
	  * para generar la view part
	  */
	 protected Clase domainClase;
	 
	 /**
	  * Interfaz grafica que contiene todos 
	  * los elementos capturados en el excel
	  */
	 protected Interface interface1;
	 
	 /**
	  * Contiene la ruta de los archivos xmls
	  * extraidos en el excel
	  */
	 protected String path;
	 
	 /**
	  * Contiene la ruta abosoluta del excel
	  * a capturar
	  */
	 protected String absolutePath;
	 
	 /**
	  * Coleccion que contiene el conjunto de
	  * dimensiones de las tablas identificadas 
	  * en el excel
	  */
	 protected ArrayList<String> listTables;
	 
	 /**
	  * Contiene el conjunto de nombres de los
	  * combobox identificados en el excel
	  */
	 protected ArrayList<String> listComboBox;
	 
	 /**
	  * Contiene la dimension del excel 
	  */
	 protected String dimens;
	 
	 /**
	  * Contiene la cantidad de tablas que existen
	  * en el excel
	  */
	 protected int nTablas;
	 
	 /**
	  * Posicion relativa en X que cada contenedor
	  * debe tener como referencia  
	  */
	 protected int nx;
	 
	 /**
	  * Posicion relativa en y que cada contenedor
	  * debe tener como referencia  
	  */
	 protected int ny;
	 
	 /**
	  * Arreglo que contiene las posibles adyacencias en X
	  * de una celda. Se necesita para el BFS
	  */
	 protected int xs[] = {1,-1, 0, 0};
	 
	 /**
	  * Arreglo que contiene las posibles adyacencias en Y
	  * de una celda. Se necesita para el BFS
	  */
	protected int ys[] = {0,0, 1, -1};
	
	//--------------------------------------------------------
	//Constructor
	//--------------------------------------------------------
	
	 public DataformGeneration(String ruta,String as){
		 this.path = ruta+"/xl/";
		 this.absolutePath = as;
	 }
	
	//--------------------------------------------------------
	//Metodos
	//--------------------------------------------------------
	 
	/**
	 * Metodo que hace los llamados necesarios a los otros metodos
	 * para generar la produccion del Dataform
	 * @throws ParserConfigurationException
	 * @throws SAXException
	 * @throws IOException
	 * @throws EncryptedDocumentException
	 * @throws InvalidFormatException
	 */
	public void generate() throws ParserConfigurationException, SAXException, IOException, EncryptedDocumentException, InvalidFormatException{
		
		//Incializa la model factory y el diagrama para agregar elementos en el
		Init();
		
		//Identifica las tablas en el XML y obtiene sus dimenciones
		getTables();
		
		//En el libro de visitados, marca dichas tablas para que no sean analizadas 
		//en el metodo de getExtraInformation
		MarcarTablas(listTables);
		
		//Se encarga de indetificar los componentes restantes que estan en el excel
		//Ya sea contenedores, labels, combobox etc
		getExtraInformation();
		
		//Se salva la produccion  del dataform
		salvarDF();
	}
	
	
	
	public void setBoundsGraphicalContainer( GraphicalContainer graphicalContainer,int x, int y, int width, int height) {
		graphicalContainer.setWidth(new Integer(width));
		graphicalContainer.setHeight(new Integer(height));
		graphicalContainer.setPositionX(x);
		graphicalContainer.setPositionY(y);
	}
	
	
	public void setAtributesContaimentRelation(tooldataform.formmodel.concreta.Containment c, int i){
		c.setAMultiplicidad(tooldataform.pmoo.Cardinalidad.N);
		c.setBMultiplicidad(tooldataform.pmoo.Cardinalidad.N);
		c.setANavegable(Valores.SI);
		c.setBNavegable(Valores.SI);
		c.setBinding(Valores.SI);
		c.setARol("ownedByTable"+i);
		c.setBRol("listTable"+i);
		c.setName("name"+i);
	}
	/**
	 * Metodo que inicializa la produccion del Dataform
	 * @throws ParserConfigurationException
	 * @throws SAXException
	 * @throws IOException
	 */
	public void Init() throws ParserConfigurationException, SAXException, IOException{
		
		/*Obtiene la dimenscion del excel
		 *formato de la dimension
		 *ejemplo: A3:D7
		 */
		dimens = getDimention();
		
		String inicio = dimens.split(":")[0];
		String fin = 	dimens.split(":")[1];
		
		//Se obtienen las coordenandas relativas
		Nodo coordinate = getCoordinates(inicio);
		nx = coordinate.x;   ny = coordinate.y;
		
		/* Se obtiene el size de la interfaz
		 * Formato x, y.
		 */
		Nodo size = getSizes(inicio, fin);
		
		//Se instancian los objetos necesarios para crear la produccion
		modelFactory    = tooldataform.TooldataformFactory.eINSTANCE.createModelFactory();
		project         = CoreFactory.eINSTANCE.createProject();
		dataformDiagram = ConcretaFactory.eINSTANCE.createDataForm_Diagram();
		domainDiagram   = CoreFactory.eINSTANCE.createDomain_Diagram();
		interface1      = ConcretaFactory.eINSTANCE.createInterface();
		
		//Se dan las dimensiones y ubicacion de la interfaz
		setBoundsGraphicalContainer(interface1, 10, 10 ,size.x  + 80, size.y + 60);	
		System.out.println( (size.x + 80) + " " + (size.y+60));
		
		/*Se relacionan adecuadamente los objetos incializados anteriormente
		 *Para generar un dataform sin errores
		 */
		dataformDiagram.setTheInterface(interface1);
		dataformDiagram.setOwnedByProject(project);
		dataformDiagram.setItsDiagram(domainDiagram);
		dataformDiagram.setName("model.tooldataform_diagram");
		
		domainClase = PmooFactory.eINSTANCE.createClase();
		domainClase.setName("Domain");
		domainDiagram.getListClase().add(domainClase);
		
		project.getListDiagram().add(domainDiagram);
		project.getListDataFormDiagram().add(dataformDiagram);
		project.setTheModelFactory(modelFactory);
		modelFactory.getListProyecto().add(project);
		
		/*Inicializacion de las listas para evitar 
		 *NullPointer Exception
		 */
		listTables = new ArrayList<String>();
		listComboBox = new ArrayList<String>();
	}
	
	
	
	/**
	 * Metodo que obtiene los combobox que estan en el reporte.
	 * @param libro Documento XLS del cual se captura la forma del reporte.
	 */
	public void getOrderViewModel(Workbook libro){
		
		/*Se obtiene la hoja del libro 
		 *el cual se analizará
		 */
		
		Sheet sheetL =  libro.getSheetAt(0);
		
		/*Se obtiene la ultima fila a analizar
		 *de la hoja
		 */
		int nmax = sheetL.getLastRowNum()+1;
		
		//Ubicacion en X del primer Combo
		int primerComboX=0;
		
		//Ubicacion en Y del segundo Combo
		int primerComboY=0;
		
		//Objeto necesario para obtener una celda en el excel
		Cell c;
		//Obejto necesario para obtener una fila en el excel
		Row r = null;
		
		//Recorre la hoja hasta encontrar el primer Combo
		iteradorI: for (int i = 0; i <nmax; i++) {
			r =  sheetL.getRow(i);
        	if(r == null) continue;
        	for (int j = 0; j <r.getLastCellNum(); j++) {
	    		c = r.getCell(j);
	            if(c != null && getCellValue(c).equals("*") ) { 
	            	//Es combo
	            	primerComboX=i;
	            	primerComboY=j-1;
	            	break iteradorI;
	            }
	        }
	    }
		
		/* Se recorre verticalmente de arriba hacia abajo
		 * para encontrar las profundidades del viewModel
		 * y se agregan los nombres de los combo a la 
		 * lista de combox
		 */
 		c = r.getCell(primerComboY);
		while(c!=null &&  c.getCellType()!=Cell.CELL_TYPE_BLANK){
			listComboBox.add(getCellValue(c));
			primerComboX++;
			r =  sheetL.getRow(primerComboX);
			if(r==null)
				break;
			c = r.getCell(primerComboY);
		}	
		
		for(int i=0;i<listComboBox.size();i++){
			System.out.println(listComboBox.get(i));
		}
	}	 
	
	/**
	 * Este metodo se encarga de identificar, extraer y marcar
	 * informacion adicional que se encuentra en el excel, tales
	 * como contenedores adicionales, lables, combobox, etc.
	 * @throws EncryptedDocumentException
	 * @throws InvalidFormatException
	 * @throws IOException
	 */
	public void getExtraInformation() throws EncryptedDocumentException, InvalidFormatException, IOException{
		
		//Se carga el excel a analizar
		InputStream is = new FileInputStream(absolutePath);
        Workbook libro = WorkbookFactory.create(is);
        
        //Se carga el excel en donde se marcaran los futuros componentes
        is = new FileInputStream("/VisitadosLibro1.xlsx");
        Workbook visit = WorkbookFactory.create(is);  
        
        //Se obtienen los combobox
        getOrderViewModel(libro);
        
        //Se recorre la hoja para extraer la futura 
        recorrerHoja(libro, visit);
	}
	
	
	/**
	 * Metodo que srive para extraer la dimension del excel
	 * la dimension esta denotada como la maxima cantidad
	 * de filas y columnas que se utilizan para crear el 
	 * formulario
	 * @return un string en formato: CeldaIncial:CeldaFinal 
	 *          ejemplo : C3:09
	 * @throws ParserConfigurationException
	 * @throws SAXException
	 * @throws IOException
	 */
	public String getDimention()throws ParserConfigurationException, SAXException, IOException{
		
		//Carga el xml del excel
		Document doc = getXML(path+"worksheets/sheet1.xml");
		doc.getDocumentElement().normalize();
		
		//Obtiene el tag Dimension
		NodeList nList = doc.getElementsByTagName("dimension");
		Node node = nList.item(0);
		String s="";
		if(node.getNodeType()==Node.ELEMENT_NODE){
			Element e = (Element)node;
			s = e.getAttribute("ref");
		}
		return s;
	}
	
	/**
	 * Este metodo explora el xml del excel y se encarga de obtener
	 * el numero total de tablas que se encuentran en el
	 * @return el numero de tablas marcadas en el excel
	 * @throws ParserConfigurationException
	 * @throws SAXException
	 * @throws IOException
	 */
	public  int getNumberTables() throws ParserConfigurationException, SAXException, IOException{		
		
		//Carga el xml del excel
		Document doc = getXML(path+"worksheets/sheet1.xml");
		doc.getDocumentElement().normalize();	
		
		//Obtiene el tag que contiene la lista de tablas
		NodeList nList = doc.getElementsByTagName("tablePart");
		
		return nList.getLength();
	}
	
	
	/**
	 * Este metodo se encarga de explorar el xml del excel
	 * y se encarga de extraer las propiedades de cada tabla
	 * que se encuentran en el y agregar las tablas a la 
	 * producción del datafrom
	 * @throws ParserConfigurationException
	 * @throws SAXException
	 * @throws IOException
	 */
	public void getTables() throws ParserConfigurationException, SAXException, IOException{
		
		//Obtiene el numero de tablas a agregar al dataform
		int n = getNumberTables();
		nTablas = n;
		
		//Documento xml del excel
		Document doc;
		for(int i=1;i<=n;i++){
			
			//Se crea el container que contendrá la tabla
			Container containerTablas = ConcretaFactory.eINSTANCE.createContainer();
			containerTablas.setName("Table"+i);
			
			//Se lee el archivo xml relacionado con la tabla a analizar
			doc = getXML(path +"tables/table"+i+".xml");
			
			//Se obtiene la dimension de la tabla
			String s="";
			NodeList es = doc.getElementsByTagName("autoFilter");
			Node node = es.item(0);
			if(node.getNodeType()==Node.ELEMENT_NODE){
				Element e = (Element)node;
				s = e.getAttribute("ref");
				listTables.add(s);
			}
			
			//Se extrae la dimencion de la tabla
			String inicio = s.split(":")[0];
			String fin = 	s.split(":")[1];
				
			//Se obtienen las coordenandas y el size de la tabla
			Nodo coordinates= getCoordinates(inicio);
			Nodo size = getSizes(inicio, fin);
			
			//Se obtienen las columnas
			NodeList nList = doc.getElementsByTagName("tableColumn");
			ArrayList<String> columnas = new ArrayList<String>();			
			for (int j = 0; j < nList.getLength(); j++) {
				Node nNode = nList.item(j);
				if(nNode.getNodeType()==Node.ELEMENT_NODE){
					Element e = (Element)nNode;
					columnas.add(e.getAttribute("name"));
				}
			}
			
			//Se crea  la instancia de la tabla
			TableView tb = ConcretaFactory.eINSTANCE.createTableView();
			tb.setName("Table"+i);
			
			//Se agregan las colummnas a la tabla
			for(int j=0;j<columnas.size();j++){
				ColumView c= ConcretaFactory.eINSTANCE.createColumView();
				c.setName(columnas.get(j));
				tb.getListColumView().add(c);
			}
			
			//Se setean las dimensiones y posicion de la tabla
			setBoundsGraphicalContainer(tb, 15, 15, size.x, size.y);
			
			//Se setean las dimensiones y posicion del contenedor
			setBoundsGraphicalContainer(containerTablas,coordinates.x - nx + 40, coordinates.y - ny + 25, size.x + 40, size.y+ 40);
			
			//Se agrega la tabla al contenedor
			containerTablas.getListGraphicalContainer().add(tb);
			
			//Se crea la relacion de contaiment para que la tabla se pueda visualizar
			tooldataform.formmodel.concreta.Containment c = ConcretaFactory.eINSTANCE.createContainment();
			setAtributesContaimentRelation(c, i);
			
			//Se agrega el source y target de la relacion
			c.getSource().add(containerTablas);
			c.getTarget().add(tb);
			
			//Se agrega la relacion  al diagrama
			dataformDiagram.getListarelacion().add(c);
			
			//Se agrega el contendor a la interfaz 
			interface1.getListGraphicalContainer().add(containerTablas);
		}	
	}
	
	/**
	 * Metodo que se encarga de guardar en el archivo la produccion realizada
	 * cuando se analiza el excel
	 */
	public void salvarDF(){
		org.eclipse.emf.common.util.URI uri = org.eclipse.emf.common.util.URI.createURI("platform:/resource/GestionConsultas/domain/model.tooldataform");
		org.eclipse.emf.ecore.resource.ResourceSet resourceSet= new org.eclipse.emf.ecore.resource.impl.ResourceSetImpl();
		org.eclipse.emf.ecore.resource.Resource resource = resourceSet.createResource(uri);
		resource.getContents().add(modelFactory);
		try {
			resource.save(java.util.Collections.EMPTY_MAP);
		} catch (java.io.IOException e) {
			e.printStackTrace();
		}

	}
	
	/**
	 * Metodo que se encarga de cargar un documento xml
	 * dado a travez de una url y cargarlo en un objeto 
	 * de tipo documento
	 * @param url ruta donde se encuentra el xml a cargar
	 * @return un objeto de tipo documento con todas las propiedades del xml cargado
	 * @throws ParserConfigurationException
	 * @throws SAXException
	 * @throws IOException
	 */
	public Document getXML(String url)throws ParserConfigurationException, SAXException, IOException{
		File fXmlFile = new File(url);
		DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
		DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
		Document doc = dBuilder.parse(fXmlFile);
		return doc;
	}
	
	
	/**
	 * Metsodo que se encarga de marcar las celdas de las  tablas obtenidas en el metodo getTables
	 * para cuando se obtenga las demas informacion, estas celdas no sean analizadas
	 * @param sizes coleccion de strings que contienen las dimencions de las tablas
	 * @throws IOException
	 * @throws EncryptedDocumentException
	 * @throws InvalidFormatException
	 */
	public void MarcarTablas(ArrayList<String> sizes) throws IOException, EncryptedDocumentException, InvalidFormatException{
       
		//Se crea el libro de visitados
		Workbook visit = new XSSFWorkbook();
        Sheet sheetV =  visit.createSheet();
       
        for(int i=0;i<sizes.size();i++){
        	//Se obtiene la dimension de la tabla que viene en formato "CeldaInicio:CeldaFinal" ejemplo: C1:P44
        	String inicio = sizes.get(i).split(":")[0], fin =  sizes.get(i).split(":")[1];
        	
        	//Se recorre las filas de la dimension
        	for(int  j = Integer.parseInt(capturarNumeros(inicio))-1 ; j <Integer.parseInt(capturarNumeros(fin)) ;j++){
        		
        		Row r= sheetV.getRow(j);
        		if(r==null)
        			r= sheetV.createRow(j);
        		
        		//Se obtiene la columna inicial y final
        		int wf= toInt(stractColumn(fin))-1;
        		int wi = toInt(stractColumn(inicio))-1;
        		
        		//Se recorre las columnas de la dimension
        		for(int k = wi; k <=wf;k++ ){
        			Cell c = r.createCell(k);
        			//Se le asigna el valor 1, que indica que se visito
        			c.setCellValue(1);
        		}
        	}
        }
        //Se guarda el archivo de visitados
        FileOutputStream fos = new FileOutputStream("/VisitadosLibro1.xlsx");
	    visit.write(fos);
	    visit.close();
	    fos.close();
	}
	
	/**
	 * Metodo que sirve para reorganizar las posiciones X y Y de los contenedores de las tablas
	 * leyendo el archivo de visitados y contando cuantos contenedores tiene por encima y por debajo
	 * @param sheetV Hoja de visitados que contiene la informacionde los contenedores
	 */
	public void reOrganizarTablas(Sheet sheetV){
		
		for(int i=0;i<listTables.size();i++){
			
			//Se obtiene la dimension de la tabla que viene en formato "CeldaInicio:CeldaFinal" ejemplo: C1:P44
			String inicio = listTables.get(i).split(":")[0], fin = listTables.get(i).split(":")[1],fins = dimens.split(":")[1];
			
			//Se obtiene la ubicacion de la fila del inicio del contenedor
			int j = Integer.parseInt(capturarNumeros(inicio))-1;
			
			//Se obtiene la ubicacion de la fila del final del contendor
			int filaFinalContenedorTabla = Integer.parseInt(capturarNumeros(fin))-1;
			
			//Se extrae la columna de incio del contendor
			int finj = toInt(stractColumn(inicio))-1;
			
			//Se extrae la ultima columna NO nula del excel
			int fini = Integer.parseInt(capturarNumeros(fins))-1;

			//Se calculan las coordenadas iniciales del contendor
			Nodo coordinates  = getCoordinates(inicio);
			
			//Se calculan la cantidad de contenedores que tiene por encima
			int containersV = getAmountContainersV (j, 0 , fini,sheetV);
       	
			//Se obtiene el Y actual del contenedor
			int YO = interface1.getListGraphicalContainer().get(i).getPositionY();
			
			//Se obtiene la cantidad de contendores que tiene a la izquierda el contenedor
			//Y cuantas columnas se estan utilizando
			Nodo containersH = getAmountContainersH(j,finj, filaFinalContenedorTabla , sheetV);
			
			int xs=0;
			if(containersH.x==0){ //Si no hay contendores se ubica en la posicion acual
				xs = coordinates.x - nx + 40;
			}else{ //De lo contrario se modifica el x en la posicion deseada
				
				xs= (containersH.y*100 + 40*containersH.x) + (40*containersH.x)  + 40;
			}
			
			//Se modifican las posisiones del contenedor 
			interface1.getListGraphicalContainer().get(i).setPositionX( xs );
			interface1.getListGraphicalContainer().get(i).setPositionY(YO + (40*containersV));
		}
	}
	
	/**
	 * Extrae la posicion maxima de valores no nulos en el excel
	 * @param a lista a analizar
	 * @return la fila maxima encontrada
	 */
	public int getMaxX(ArrayList<Nodo> a){		
		int max = -1;
		for(int i=0;i<a.size();i++){
			if(a.get(i).x > max){
				max = a.get(i).x;
			}
		}
		return max;
	}
	
	/**
	 * Metodo que indica cuando una posicion es valida para el BFS
	 * @param i fila i 
	 * @param j columna j
	 * @return Verdadero si se encuentra en el rango especificado 
	 * 		   Falso si no cumple
	 */
	public static boolean isValid(int i, int j) {
		if(i >= 0 && i < 1048576  && j >= 0 && j < 16384)
			return true;
		return false;
	}
	
	/**
	 * Algorithmo que sirve para explorar una serie de celdas
	 * NO NULAS en el excel original a partir de un punto dado
	 * Para mas informacion Consultar el funcionamiento del 
	 * ALGORITMO BFS en internet
	 * @param i fila inicial en donde se empieza a explorar
	 * @param j columna inicila en donde se empieza a explorar
	 * @param sheetL Hoja del libro original
	 * @param sheetV Hoja del libro de visitados
	 * @return una lista de nodos con las celdas que se visitaron en la exploracion
	 */
	public ArrayList<Nodo> bfs(int i, int j,Sheet sheetL,Sheet sheetV) {	
		
		//Se extrae la fila y columna inicial
		Row r = sheetL.getRow(i);
		Cell c = r.getCell(j);
		
		//Arreglo que contiene las celdas visitadas en la exploracion
		ArrayList<Nodo> res = new ArrayList<Nodo>();
 		
		//Se prepara la fila y columna en el excel de visitados
		Row rv = sheetV.getRow(i);
		Cell cv = rv.createCell(j);
		cv.setCellValue(1);
		
		//Agregamos la posicion inicial al arreglo de celdas a retornar
		res.add(new Nodo(i, j));
		
		//Cola que contendran las celdas a analizar
		Queue<Cell> q =   new LinkedList<Cell>();
		q.add(c);
		
		/*
		 *Mientras que haya celdas a analizar
		 *Se analizaran sus adyacencias para 
		 *encontrar mas celdas No nulas
		 */
		while (!q.isEmpty()) {	
			Cell u = q.peek();
			q.poll();
			
			//Se observan las adyacencias de esta celda
			//Las adyancencias de una celda son
			//Arriba, Abajo, Izquierda y Derecha
			
			for(int k = 0; k < 4; k++) {
				
				//Se obtiene la posible adyacencia en x y en y
				int vx = u.getRowIndex()    + xs[k];
				int vy = u.getColumnIndex() + ys[k];
				
				//Se verifica si es  una adyacencia valida
				if(isValid(vx, vy)){
					
					//Si la fila no esta creada en el original
					//No se analiza
					r = sheetL.getRow(vx);
					if(r==null) continue;
					c = r.getCell(vy);
					
					//Si la celda no esta creada o esta vacia NO se analiza
					if (c !=null && c.getCellType()!=Cell.CELL_TYPE_BLANK ) {
						rv = sheetV.getRow(vx);
						
						//Se marca en el excel de visitados esta celda 
						//Como analizada para no analizarla mas
						if(rv==null){
							rv=sheetV.createRow(vx);
							cv=rv.createCell(vy);
							cv.setCellValue(1);
							
							//Se agrega a lista la celda (vx,vy) como celda
							//No NULA y NO VACIA
							res.add(new Nodo(vx, vy));
							q.add(c);
						}else{

							cv = rv.getCell(vy);
							if(cv == null) {
								cv = rv.createCell(vy);
								cv.setCellValue(1);
								//Se agrega a lista la celda (vx,vy) como celda
								//No NULA y NO VACIA
								res.add(new Nodo(vx, vy));
								q.add(c);
							}
						}
					}						
				}
			}
		}
		return res;
	}

	/**
	 * Este metodo se encarga de recorrer la hoja del excel original
	 * Con el fin de buscar informacion adicional para la construccion 
	 * del dataform, en este metodo se identifican nuevos contendores
	 * y labels que sirven de informacion  de contexto para el reporte
	 * @param libro Libro de excel el cual se quiere capturar el modelo mental
	 * @param visit Libro de excel que contiene cuales celdas ya se han analizado
 	 * @throws IOException
	 */
	public void recorrerHoja(Workbook libro, Workbook visit) throws IOException {
		
		//Carga la primera hoja de cada libro (Original, Visitados)
		Sheet sheetL =  libro.getSheetAt(0);
		Sheet sheetV =  visit.getSheetAt(0);
		
		//Se obtiene la ultima fila a anlizar
		int nmax = sheetL.getLastRowNum()+1;
		
 		for (int i = 0; i <nmax; i++) {
        	
 			//Si la fila no esta creada en el libro orignial, no se analiza y se continua
 			Row r =  sheetL.getRow(i);
        	if(r==null) continue;
        	
        	//Se obtiene la fila en el libro de visitados
        	Row rv = sheetV.getRow(i);
        	if(rv ==null)
        		rv = sheetV.createRow(i);
        	
        	//Se recorre la fila hasta la ultima columna NO NULA
        	for (int j = 0; j <r.getLastCellNum(); j++) {
	    		
        		//Se obtienen las celdas del original y el visitado en la posicion J
        		Cell c = r.getCell(j);  Cell cv = rv.getCell(j);
        		
        		//Si la celda es nula en el original no se analiza y se continua
	            if(c != null && cv==null ) { 
	            	
	            	//Si la celda esta vacia no se analiza y se continua 
	            	if(c.getCellType()==Cell.CELL_TYPE_BLANK)
	            		continue;
	            	
	            	//Se ejecuta el BFS con el fin de buscar 
	            	//Mas celdas no nulas 
	            	//Para almacenarlas en un mismo contendor
	            	ArrayList<Nodo> res = bfs( i, j,sheetL,sheetV);
	            	
	            	//Se ordenan las celdas encontradas
	            	Collections.sort(res);
	            	
	            	int m = res.size(); 	
	            	
	            	//Se obtiene la ultima celda NO nula de toda la hoja
	            	String fins  = dimens.split(":")[1];
	            	
	    			int finy = toInt(stractColumn(fins))-1;
	            	int fini = res.get(m-1).x;
	            	
	            	//Se calcula cuantos contendores existen por encima de este contendor
	            	int containersV = getAmountContainersV(i, 0, finy ,sheetV);
	            	
	            	//Se calcula cuantos contenedores existen a la izquierda de este contendor
	            	Nodo containersH = getAmountContainersH(i, j, fini, sheetV);
	            	
	            	if(m>1){
	            		
	            		//Se extraen las dimenciones del contenedor que contendra a las celdas encontradas
	            		String key =res.get(0).x +"-"+ res.get(0).y+":" + res.get(m-1).x +"-" + res.get(m-1).y ;
	            	    
	            		//Se delimita el inicio y el final del conentendor
	            		String inicio = key.split(":")[0]; String fin  = key.split(":")[1];
	            		
	            		//Se crea la instancia del contendor a agregar
	                    Container containerTablas = ConcretaFactory.eINSTANCE.createContainer();
	        			containerTablas.setName("Container"+ (nTablas++));
	        		
	        			//Se establece las coordenadas y el tamaño
	         			Nodo coordinates=getCoordinates2(inicio);
	         			Nodo size = getSizes2(inicio, fin);
	         			
	         			//Se ajustan sus posciones en x 
	        			int xs=0;
	        			if(containersH.x==0){
	        				xs = coordinates.x - nx + 40;
	        			}else{
	        				xs= (containersH.y*100 + 40*containersH.x) + (40*containersH.x)  + 40;
	        			}
	        			//Se setean los bounds al contenedor
	        			setBoundsGraphicalContainer(containerTablas, xs,coordinates.y -ny + (40*containersV)  + 25, size.x + 20, size.y + 40);
	        			
	        			//Posiciones relativas para el contenido del contenedor
	         			Nodo relativo = getCoordinates2(res.get(0).x +"-" +res.get(0).y);
	         			int relativex = relativo.x ;
	         			int relativey = relativo.y ;
	         			
	         			for(int k=0;k<m;k++){
	         				
	         				//Se obtiene el X y el Y del componente 
	         				int x = res.get(k).x;    int y = res.get(k).y;
	         				
	         				//Se obtiene su valor
	         				Row rr = sheetL.getRow(x);  Cell  cc = rr.getCell(y);
	         				String e = getCellValue(cc);
	         				
	         				//Se Obtienen las coordenadas NO Relativas al contenedor
	         				Nodo cor = getCoordinates2(x+"-"+y);
	         				
	         				//Se crea la instancia del label
	         				LabelView label = ConcretaFactory.eINSTANCE.createLabelView();
	         				label.setName(e);
	         				
	         				//Se setean los bounds
	         				label.setId("label"+ (char)(k+64));
	         				label.setWidth(new Integer(-1));
		        			label.setHeight(new Integer(-1));
		        			label.setPositionX(new Integer(cor.x  - relativex + 20 ));
		        			label.setPositionY(new Integer(cor.y  - relativey + 10));
	         				
		        			//Se agrega al contenedor
		        			containerTablas.getListIndividualElementDataForm().add(label);
	         			}
	         			interface1.getListGraphicalContainer().add(containerTablas);
	            	}
	            }
	        }
	    }
 		
 		//Se reorganizan las tablas
 		reOrganizarTablas(sheetV);
		FileOutputStream fos = new FileOutputStream("/VisitadosLibro1.xlsx");
	    visit.write(fos);
	    visit.close();
	    fos.close();
	}
	
	
	/**
	 * Este metodo sirve para contar cuantos
	 * Contenedores existen hasta la posicion i
	 * verticalmente, es decir, los contenedores
	 * que estan por encima de este contenedor
	 * @param i numero de fila donde se encuentra el contenedor
	 * @param j numero de columna donde se encuentra el contenedor
	 * @param finY final del arhivo en columnas
	 * @param sheetV hoja de visitados para verificar los contendores
	 * @return la cantidad de conta iner que hay por encima del contenedor 
	 * 		   que se encuentra en la posicion (i, j) del excel
	 */
	public int getAmountContainersV(int i, int j,int finY , Sheet sheetV){
		
		Row rv;
		int res =0;
		int max = -1;
		for(int l=j ; l <= finY; l++){
			res=0;
			for(int k=0;k<i;k++){
				rv = sheetV.getRow(k);
				if(rv==null)
					continue;
				Cell cv = rv.getCell(l);
				if(cv!=null){
					res++;
					while(cv!=null){
						k++;
						rv = sheetV.getRow(k);
						if(rv==null)
							break;
						cv = rv.getCell(l);
					}
				}
			}	
			max = Math.max(max, res);
		}
		return max;
	}
	

	/**
	 * Este metodo sirve para contar cuantos
	 * Contenedores existen desde 0 hasta la columna j
	 * horizontalmente, es decir, los contenedores
	 * que estan a la izquierda de este contenedor
	 * @param i numero de fila donde se encuentra el contenedor
	 * @param j numero de columna donde se encuentra el contenedor
	 * @param fini final del arhivo en fiñas
	 * @param sheetV hoja de visitados para verificar los contendores
	 * @return la cantidad de containers que hay a la izquierda del contenedor 
	 * 		   que se encuentra en la posicion (i, j) del excel
	 */
	public Nodo getAmountContainersH(int i, int j, int fini ,Sheet sheetV){	
		Row rv;
		int res =0;
		int cantidadFilas=0;
		int max = -1;
		int maxF = -1;
		for(int l = i ; l<= fini ;l++){
			res=0;
			cantidadFilas=0;
			for(int k=0;k<j;k++){
				rv = sheetV.getRow(l);
				if(rv==null)
					continue;
				Cell cv = rv.getCell(k);
				if(cv!=null){
					res++;
					while(cv!=null){
						k++;
						cantidadFilas++;
						rv = sheetV.getRow(l);
						if(rv==null)
							break;
						cv = rv.getCell(k);
					}
				}
				
			}	
			if(res>max){
				max = res;
				maxF = cantidadFilas;
			}
		}
		Nodo x = new Nodo(max, maxF);
		return x;
	}
	
	/**
	 * Este metodo sirve para obtener las coordenadas x,y de una celda dada del excel
	 * @param inicio variable string que viene en formato "L*N*" ejemplo de esta expresion regular: AA123
	 * @return un objeto de tipo nodo con las coordenadas (x,y)
	 */
	public Nodo getCoordinates(String inicio){
		Nodo res;
		int wi = toInt(stractColumn(inicio))-1;
		int w = (wi) *80;
		int h = ( Integer.parseInt(capturarNumeros(inicio))-1)*20;
		res = new Nodo(w, h);
		return res;
	}
	
	/**
	 * Este metodo sirve para extraer los numero de una celda que venga en el formato de celdas en excel
	 * por ejemplo si la celda es la AA345 este metodo retornará 345 en formato string
	 * @param s string que contiene la celda a la cual le queremos extraer los numeros para saber la fila
	 * @return un string con los numeros consecutivos del string por parametro
	 */
	public String capturarNumeros(String s){
		int i=0;
		for(;i<s.length();i++){
			if( s.charAt(i) >= 65 && s.charAt(i)<=90){
				continue;
			}else{
				break;
			}
		}
		return s.substring(i);
	}
	
	
	/**
	 * Este metodo sirve para calcular el tamaño en pixeles de un contenedor
	 * a traves de sus dimensiones de filas y columnas establecidas en el excel
	 * @param inicio es la celda donde empieza el contendor. (esquina izquierda superior)
	 * @param fin es la celda donde termina el contenedor. (esquina derecha inferior)
	 * @return un nodo con las dimensiones de ancho y largo en pixeles del contenedor
	 */
	public Nodo getSizes(String inicio,String fin){
		Nodo res;
		int wf= toInt(stractColumn(fin))-1;
		int wi = toInt(stractColumn(inicio))-1;
		int w = ( wf - wi + 1)*100;
		int h = ( Integer.parseInt(capturarNumeros(fin)) - Integer.parseInt(capturarNumeros(inicio)) + 1)*20;  
		res = new Nodo(w, h);
		return res;
	}
	
	public String stractColumn(String s){
		String res="";
		for(int i=0;i<s.length();i++){
			if( s.charAt(i) >= 65 && s.charAt(i)<=90){
				res+= s.charAt(i);
			}else{
				break;
			}
		}
		return res;
	}
	
	public  Nodo getSizes2(String inicio,String fin){
		Nodo res;
	
		String ws1 = inicio.split("-")[1];
		String hs1 = inicio.split("-")[0];
		String ws2 = fin.split("-")[1];
		String hs2 = fin.split("-")[0];
		int w = ( (Integer.parseInt(ws2))  -  (Integer.parseInt(ws1)) + 1 )*100;
		int h = ( Integer.parseInt(hs2) - Integer.parseInt((hs1)) + 1)*20 ;  
		res = new Nodo(w, h);
		return res;
	}
	
	public  Nodo getCoordinates2(String inicio){
		Nodo res;
		String ws = inicio.split("-")[1];
		String hs = inicio.split("-")[0];
		int w = Integer.parseInt(ws) *80;
		int h = Integer.parseInt(hs) *20;
		res = new Nodo(w, h);
		return res;
	}
	
	
	public int toInt(String s){
		int res =0;
		int m = s.length()-1;
		int e=0;
		for(int i=m;i>=0;i--){
			res += ( (s.charAt(i) - 64))*pow(26,e);
			e++;
		}
		return res;
	}
	
	
	public int pow(int b,int e){
		int res =1;	
		for(int i=0;i<e;i++){
			res*=b;
		}
		return res;
	}
	
	public String getCellValue(Cell cell){
		 int cel_Type = cell.getCellType();                           
	     String res="";
		 switch(cel_Type){
	     	case 0: res+=cell.getNumericCellValue();
	             	break;
	     	case 1: res+=cell.getStringCellValue();
	     			break;
	     	case 4:res+=cell.getBooleanCellValue();
	             	break;
	     	case 3:res+="";
	     			break; 
	     }
		 return res;
	}
}