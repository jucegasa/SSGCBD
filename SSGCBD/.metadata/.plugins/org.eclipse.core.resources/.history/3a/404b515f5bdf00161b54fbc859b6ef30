package reportes.view;

import java.io.IOException;

import org.eclipse.emf.common.ui.URIEditorInput;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.gmf.runtime.diagram.core.services.ViewService;
import org.eclipse.gmf.runtime.notation.BasicCompartment;
import org.eclipse.gmf.runtime.notation.Bounds;
import org.eclipse.gmf.runtime.notation.DecorationNode;
import org.eclipse.gmf.runtime.notation.DescriptionStyle;
import org.eclipse.gmf.runtime.notation.Diagram;
import org.eclipse.gmf.runtime.notation.FillStyle;
import org.eclipse.gmf.runtime.notation.FontStyle;
import org.eclipse.gmf.runtime.notation.Node;
import org.eclipse.gmf.runtime.notation.NotationFactory;
import org.eclipse.ui.IWorkbenchPage;
import org.eclipse.ui.PartInitException;
import org.eclipse.ui.PlatformUI;
import org.openxmlformats.schemas.wordprocessingml.x2006.main.StylesDocument;

import tooldataform.ModelFactory;
import tooldataform.core.Project;
import tooldataform.diagram.edit.parts.DataForm_DiagramEditPart;
import tooldataform.diagram.part.MetamodelodataformDiagramEditor;
import tooldataform.diagram.part.MetamodelodataformDiagramEditorPlugin;
import tooldataform.diagram.part.MetamodelodataformDiagramEditorUtil;
import tooldataform.diagram.part.MetamodelodataformVisualIDRegistry;
import tooldataform.formmodel.concreta.ColumView;
import tooldataform.formmodel.concreta.ComboView;
import tooldataform.formmodel.concreta.Container;
import tooldataform.formmodel.concreta.DataForm_Diagram;
import tooldataform.formmodel.concreta.GraphicalIndividualEement;
import tooldataform.formmodel.concreta.Interface;
import tooldataform.formmodel.concreta.ItemCombo;
import tooldataform.formmodel.concreta.LabelView;
import tooldataform.formmodel.concreta.TableView;
import tooldataform.formmodel.concreta.TextView;
import tooldataform.formmodel.containers.GraphicalContainer;

/**
 * Clase que se encarga de toda la genaracion del Diagrama Dataform
 * 
 * @author Julio Cesar Garcia Sabogal
 * @author Fabio Stiven Oquendo Soler
 * @author Cristian Daniel Palechor Sepulveda
 */
public class DataformDiagramGenerator {
	
	private ModelFactory modelFactory;
	private Project project;
	private DataForm_Diagram dataformDiagram;
	private Interface interface1;
	
	/**
	 * Constructor DataformDiagramGeneration
	 * @param mf
	 */
	public DataformDiagramGenerator(ModelFactory modelFactory) {
		super();
		this.modelFactory = modelFactory;
		this.project = this.modelFactory.getListProyecto().get(0);
		this.dataformDiagram = project.getListDataFormDiagram().get(0);
		this.interface1 = dataformDiagram.getTheInterface();
	}

	/**
	 * Metodo que guarda el diagrama dataform en la produccion
	 * @param diagram El diagrama a ser guardado
	 */
	public void salvarDiagram(Diagram diagram) {
		org.eclipse.emf.common.util.URI uri = org.eclipse.emf.common.util.URI.createURI("platform:/resource/GestionConsultas/domain/model.tooldataform_diagram");
		org.eclipse.emf.ecore.resource.ResourceSet resourceSet = new org.eclipse.emf.ecore.resource.impl.ResourceSetImpl();
		org.eclipse.emf.ecore.resource.Resource resource = resourceSet.createResource(uri);
		resource.getContents().add(diagram);
		try {
			resource.save(java.util.Collections.EMPTY_MAP);
		} catch (java.io.IOException e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * Metodo que guarda el Diagram que se genero
	 * a partir de los metamodelos
	 */
	public void generateDiagram() {
		
		Diagram diag = createDiagram();
		salvarDiagram(diag);
		openDiagram(diag);
	}
	
	/**
	 * Queda un Nodo vacio de tipo type
	 * @param type el tipo que se le asignara al Nodo
	 * @return Un Nodo de tipo type
	 */
	public Node createNode(String type) {
		
		org.eclipse.gmf.runtime.notation.Node node = NotationFactory.eINSTANCE.createNode();
		node.setType(type);
		return node;
	}
	
	/**
	 * Queda una DecorationNode vacia de tipo type
	 * @param type el tipo que se le asignara a la DecorationNode
	 * @return Una DecorationNode de tipo type
	 */
	public DecorationNode createDecorationNode(String type) {
		
		DecorationNode decoracion = NotationFactory.eINSTANCE.createDecorationNode();
		decoracion.setType(type);
		return decoracion;
	}
	
	/**
	 * Queda un BasicCompartment vacio de tipo type
	 * @param type el tipo que se le asignara al BasicCompartment
	 * @return Un BasicCompartment de tipo type
	 */
	public BasicCompartment createBasicComparment(String type) {
		
		BasicCompartment basicCompartment = NotationFactory.eINSTANCE.createBasicCompartment();
		basicCompartment.setType(type);
		return basicCompartment;
	}
	
	
	public DescriptionStyle createDescriptionStyle(){
		DescriptionStyle ds = NotationFactory.eINSTANCE.createDescriptionStyle();
		return ds;
	}
	
	public FillStyle createFillStyle(){
		FillStyle fs = NotationFactory.eINSTANCE.createFillStyle();
		return fs;
	}
	
	public FontStyle createFontStyle(){
		FontStyle fs = NotationFactory.eINSTANCE.createFontStyle();
		fs.setFontName("Segoe UI");
		return fs;
	}
	
	/**
	 * Crea un Bounds con las respectivas coordenadas
	 * @param x posicion x en pixeles
	 * @param y posicion y en pixeles
	 * @param width ancho en pixeles
	 * @param height alto en pixeles
	 * @return Un Bounds con las coordenadas.
	 */
	public Bounds createBounds(int x, int y, int width, int height) {
		
		Bounds bounds = NotationFactory.eINSTANCE.createBounds();
		bounds.setX(x);
		bounds.setY(y);
		bounds.setWidth(width);
		bounds.setHeight(height);
		return bounds;
	}
	
	/**
	 * Crea un Nodo que contiene una Interfaces
	 * @param x posicion x de la Interface en pixeles
	 * @param y posicion y de la Interface en pixeles
	 * @param width ancho de la Interface en pixeles
	 * @param height alto de la Interface en pixeles
	 * @return Un Nodo que contiene una Interface
	 */
	public Node createInterface(int x, int y, int width, int height) {
		
		Node node = createNode("2003");
		DecorationNode decorationNode = createDecorationNode("5012");
		BasicCompartment bcContaiment = createBasicComparment("7001");
		BasicCompartment bcAtributes = createBasicComparment("7005");
		BasicCompartment bcMethods = createBasicComparment("7006");
		bcAtributes.setCollapsed(true);
		bcMethods.setCollapsed(true);
		Bounds bounds = createBounds(x, y, width, height);
		node.insertChild(decorationNode);
		node.insertChild(bcContaiment);
		node.insertChild(bcAtributes);
		node.insertChild(bcMethods);
		node.setLayoutConstraint(bounds);
		return node;
	}
	
	/**
	 * Crea un Nodo que contiene un Container
	 * @param x posicion x del Container en pixeles
	 * @param y posicion y del Container en pixeles
	 * @param width ancho del Container en pixeles
	 * @param height alto del Container en pixeles
	 * @return Un Nodo que contiene un Container
	 */
	public Node createContainer(int x, int y, int width, int height) {
		
		Node node = createNode("3001");
		DecorationNode decorationNode = createDecorationNode("5003");
		DecorationNode dnContaiment = createDecorationNode("7002");
		BasicCompartment bcAtributes = createBasicComparment("7070");
		BasicCompartment bcMethods = createBasicComparment("7071");
		bcAtributes.setCollapsed(true);
		bcMethods.setCollapsed(true);
		Bounds bounds = createBounds(x, y, width, height);
		node.insertChild(decorationNode);
		node.insertChild(dnContaiment);
		node.insertChild(bcAtributes);
		node.insertChild(bcMethods);
		node.setLayoutConstraint(bounds);
		return node;
	}
	
	/**
	 * Crea un Nodo que contiene un ComboView
	 * @param x posicion x del ComboView en pixeles
	 * @param y posicion y del ComboView en pixeles
	 * @param width ancho del ComboView en pixeles
	 * @param height alto del ComboView en pixeles
	 * @return Un Nodo que contiene un ComboView
	 */
	@SuppressWarnings("unchecked")
	public Node createComboView(int x, int y, int width, int height) {
		
		Node node = createNode("3002");
		DecorationNode decorationNode = createDecorationNode("5004");
		DecorationNode dnContaiment = createDecorationNode("7003");
		BasicCompartment bcAtributes = createBasicComparment("7060");
		BasicCompartment bcMethods = createBasicComparment("7061");
		bcAtributes.setCollapsed(true);
		bcMethods.setCollapsed(true);
		
		DescriptionStyle ds = createDescriptionStyle();
		FillStyle fs = createFillStyle();
		
		Bounds bounds = createBounds(x, y, width, height);
		node.insertChild(decorationNode);
		node.insertChild(dnContaiment);
		node.insertChild(bcAtributes);
		node.insertChild(bcMethods);
		node.getStyles().add(ds);
		node.getStyles().add(fs);
		
		node.setLayoutConstraint(bounds);
		return node;
	}
	
	/**
	 * Crea un Nodo que contiene un ItemView
	 * @return Un Nodo que contiene un ItemView
	 */
	public Node createItemCombo() {
		
		Node node = createNode("3011");
		DecorationNode decorationNode = createDecorationNode("5014");
		node.insertChild(decorationNode);
		return node;
	}
	
	/**
	 * Crea un Nodo que contiene una TableView
	 * @param x posicion x de la TableView en pixeles
	 * @param y posicion y de la TableView en pixeles
	 * @param width ancho de la TableView en pixeles
	 * @param height alto de la TableView en pixeles
	 * @return Un Nodo que contiene un TableView
	 */
	public Node createTableView(int x, int y, int width, int height) {
		
		Node node = createNode("3005");
		DecorationNode decorationNode = createDecorationNode("5007");
		DecorationNode dnContaiment = createDecorationNode("7007");
		BasicCompartment bcAtributes = createBasicComparment("7048");
		BasicCompartment bcMethods = createBasicComparment("7049");
		bcAtributes.setCollapsed(true);
		bcMethods.setCollapsed(true);
		Bounds bounds = createBounds(x, y, width, height);
		node.insertChild(decorationNode);
		node.insertChild(dnContaiment);
		node.insertChild(bcAtributes);
		node.insertChild(bcMethods);
		node.setLayoutConstraint(bounds);
		return node;
	}
	
	/**
	 * Crea un Nodo que contiene un ColumView
	 * @return Un Nodo que contiene un ColumView
	 */
	public Node createColumView() {
		Node node = createNode("3015");
		DecorationNode decorationNode = createDecorationNode("5018");
		node.insertChild(decorationNode);
		return node;
	}
	
	/**
	 * Crea un Nodo que contiene un LabelView
	 * @param x posicion x del LabelView en pixeles
	 * @param y posicion y del LabelView en pixeles
	 * @param width ancho del LabelView en pixeles
	 * @param height alto del LabelView en pixeles
	 * @return Un Nodo que contiene un LabelView
	 */
	public Node createLabelView(int x, int y, int width, int height) {
		
		Node node = createNode("3006");
		DecorationNode decorationNode = createDecorationNode("5008");
		FontStyle fontStyle = NotationFactory.eINSTANCE.createFontStyle();
		fontStyle.setFontName("Segoe UI");
		Bounds bounds = createBounds(x, y, width, height);
		node.setLayoutConstraint(bounds);
		node.insertChild(decorationNode);
		node.getStyles().add(fontStyle);
		return node;
	}
	
	/**
	 * Crea un Nodo que contiene un TextView
	 * @param x posicion x del TextView en pixeles
	 * @param y posicion y del TextView en pixeles
	 * @param width ancho del TextView en pixeles
	 * @param height alto del TextView en pixeles
	 * @return Un Nodo que contiene un TextView
	 */
	public Node createTextView(int x, int y, int width, int height) {
		
		Node node = createNode("3003");
		DecorationNode decorationNode = createDecorationNode("5005");
		Bounds bounds = createBounds(x, y, width, height);
		node.setLayoutConstraint(bounds);
		node.insertChild(decorationNode);
		return node;
	}
	
	
	/**
	 * Metodo que crea el contenido del diagrama apartir de la Interface
	 * @param graphicalContainer La Interface sobre la cual se generara el contenido
	 * @return Un Nodo que contiene la Interface con todo su contenido
	 */
	public Node initComponents(GraphicalContainer graphicalContainer) {
		
		Node node = null;
		
		if(graphicalContainer instanceof Interface) {
			
			node = createInterface(graphicalContainer.getPositionX(), graphicalContainer.getPositionY(),
					graphicalContainer.getWidth(), graphicalContainer.getHeight());
			node.setElement(graphicalContainer);
			BasicCompartment bcContaiment = (BasicCompartment) node.getChildren().get(1);
			for (int i = 0; i < graphicalContainer.getListGraphicalContainer().size(); i++) {
				
				bcContaiment.insertChild(initComponents(graphicalContainer.getListGraphicalContainer().get(i)));
			}
			
			for (int i = 0; i < graphicalContainer.getListIndividualElementDataForm().size(); i++) {
				
				bcContaiment.insertChild(initIndividualElement(graphicalContainer.getListIndividualElementDataForm().get(i)));
			}
			
		} else if(graphicalContainer instanceof Container) {
			
			node = createContainer(graphicalContainer.getPositionX(), graphicalContainer.getPositionY(),
					graphicalContainer.getWidth(), graphicalContainer.getHeight());
			node.setElement(graphicalContainer);
			DecorationNode dnContaiment = (DecorationNode) node.getChildren().get(1);
			for (int i = 0; i < graphicalContainer.getListGraphicalContainer().size(); i++) {
				
				dnContaiment.insertChild(initComponents(graphicalContainer.getListGraphicalContainer().get(i)));
			}
			
			for (int i = 0; i < graphicalContainer.getListIndividualElementDataForm().size(); i++) {
				
				dnContaiment.insertChild(initIndividualElement(graphicalContainer.getListIndividualElementDataForm().get(i)));
			}
			
		} else if(graphicalContainer instanceof TableView) {
			
			node = createTableView(graphicalContainer.getPositionX(), graphicalContainer.getPositionY(),
					graphicalContainer.getWidth(), graphicalContainer.getHeight());
			node.setElement(graphicalContainer);
			DecorationNode dnContaiment = (DecorationNode) node.getChildren().get(1);
			
			for (int i = 0; i < graphicalContainer.getListIndividualElementDataForm().size(); i++) {
				
				dnContaiment.insertChild(initIndividualElement(graphicalContainer.getListIndividualElementDataForm().get(i)));
			}
			
		} else if(graphicalContainer instanceof ComboView) {
			
			node = createComboView(graphicalContainer.getPositionX(), graphicalContainer.getPositionY(),
					graphicalContainer.getWidth(), graphicalContainer.getHeight());
			node.setElement(graphicalContainer);
			DecorationNode dnContaiment = (DecorationNode) node.getChildren().get(1);
			dnContaiment.insertChild(initIndividualElement(((ComboView) graphicalContainer).getTheItem()));
		}
		
		return node;
	}
	
	/**
	 * Metodo que crea un Nodo que contiene un IndividualElement
	 * @param graphicalIndividualEement IndividualEement del modelo
	 * @return Un Nodo que contiene un IndividualEement
	 */
	public Node initIndividualElement(GraphicalIndividualEement graphicalIndividualEement) {
		
		Node node = null;
		
		if(graphicalIndividualEement instanceof LabelView) {
				
			node = createLabelView(graphicalIndividualEement.getPositionX(),graphicalIndividualEement.getPositionY(),
								   graphicalIndividualEement.getWidth(),graphicalIndividualEement.getHeight());
			node.setElement(graphicalIndividualEement);
			
		} else if(graphicalIndividualEement instanceof TextView) {
			
			node = createTextView(graphicalIndividualEement.getPositionX(),graphicalIndividualEement.getPositionY(),
					   graphicalIndividualEement.getWidth(),graphicalIndividualEement.getHeight());
			node.setElement(graphicalIndividualEement);
		} else if(graphicalIndividualEement instanceof ItemCombo) {
			
			node = createItemCombo();
			node.setElement(graphicalIndividualEement);
		} else if(graphicalIndividualEement instanceof ColumView) {
			
			node = createColumView();
			node.setElement(graphicalIndividualEement);
		}
		
		return node;
	}
	
	
	/**
	 * Metodo que crea el Diagram a partir de los metamodelos
	 * @return el Diagram creado.
	 */
	public Diagram createDiagram(){
		
		//create the diagram
		int diagramVID = MetamodelodataformVisualIDRegistry.getDiagramVisualID(dataformDiagram);
		if (diagramVID != DataForm_DiagramEditPart.VISUAL_ID) {
			// error
		}
		Diagram diagram = ViewService.createDiagram(dataformDiagram,DataForm_DiagramEditPart.MODEL_ID,MetamodelodataformDiagramEditorPlugin.DIAGRAM_PREFERENCES_HINT);

		// save the ressource
		try {
			dataformDiagram.eResource().save(MetamodelodataformDiagramEditorUtil.getSaveOptions());
		} catch (IOException e) {
			MetamodelodataformDiagramEditorPlugin.getInstance().logError(
					"Save operation failed for: " + dataformDiagram.eResource(), e); //$NON-NLS-1$
		}
		
		Node node = initComponents(interface1);
		diagram.insertChild(node);
		diagram.setName("model.tooldataform_diagram");
		
		return diagram;
	}
	
	/**
	 * Metodo que genera una nueva vista con el Diagram
	 */
	public void openDiagram(Diagram diag){
		
		//open the diagram
		try {    
			//open it
			org.eclipse.emf.common.util.URI uri = EcoreUtil.getURI(diag);
			IWorkbenchPage page = PlatformUI.getWorkbench()	.getActiveWorkbenchWindow().getActivePage();
			page.openEditor(new URIEditorInput(uri,dataformDiagram.getName()),  MetamodelodataformDiagramEditor.ID);
			
			
		} catch (PartInitException e) {
			MetamodelodataformDiagramEditorPlugin.getInstance().logError(
					"Unable to open editor", e); //$NON-NLS-1$
		}
	}
}
